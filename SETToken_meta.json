{"compiler":{"version":"0.4.20+commit.3155dd80"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"freezeTransfers","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"setOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"unfreezeTransfers","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"getFeeParameters","outputs":[{"name":"_fixedFee","type":"uint256"},{"name":"_minVariableFee","type":"uint256"},{"name":"_maxVariableFee","type":"uint256"},{"name":"_variableFeeNumnerator","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"burnTokens","outputs":[{"name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"nonce","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"createTokens","outputs":[{"name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_amount","type":"uint256"}],"name":"calculateFee","outputs":[{"name":"_fee","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_address","type":"address"}],"name":"flags","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newFeeCollector","type":"address"}],"name":"setFeeCollector","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"_address","type":"address"},{"name":"_flags","type":"uint256"}],"name":"setFlags","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_fee","type":"uint256"},{"name":"_nonce","type":"uint256"},{"name":"_v","type":"uint8"},{"name":"_r","type":"bytes32"},{"name":"_s","type":"bytes32"}],"name":"delegatedTransfer","outputs":[{"name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"_delegate","type":"address"}],"name":"setDelegate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_fixedFee","type":"uint256"},{"name":"_minVariableFee","type":"uint256"},{"name":"_maxVariableFee","type":"uint256"},{"name":"_variableFeeNumerator","type":"uint256"}],"name":"setFeeParameters","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_feeCollector","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[],"name":"Freeze","type":"event"},{"anonymous":false,"inputs":[],"name":"Unfreeze","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"fixedFee","type":"uint256"},{"indexed":false,"name":"minVariableFee","type":"uint256"},{"indexed":false,"name":"maxVariableFee","type":"uint256"},{"indexed":false,"name":"variableFeeNumerator","type":"uint256"}],"name":"FeeChange","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"delegate","type":"address"}],"name":"Delegation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_spender","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Approval","type":"event"}],"devdoc":{"methods":{"allowance(address,address)":{"params":{"_owner":"address to get number of tokens allowed to be transferred\r       from the owner of\r","_spender":"address to get number of tokens allowed to be transferred\r       by the owner of\r"},"return":"number of tokens given spender is currently allowed to transfer\r        from given owner\r"},"approve(address,uint256)":{"params":{"_spender":"address to allow the owner of to transfer tokens from\r       message sender\r","_value":"number of tokens to allow to transfer\r"},"return":"true if token transfer was successfully approved, false otherwise\r"},"balanceOf(address)":{"params":{"_owner":"address to get number of tokens currently belonging to the\r       owner of\r"},"return":"number of tokens currently belonging to the owner of given address\r"},"burnTokens(uint256)":{"params":{"_value":"number of tokens to burn\r"}},"calculateFee(uint256)":{"params":{"_amount":"transfer amount to calculate fee for\r"},"return":"fee for transfer of given amount\r"},"createTokens(uint256)":{"params":{"_value":"number of tokens to be created.\r"}},"decimals()":{"return":"number of decimals for the token\r"},"delegatedTransfer(address,uint256,uint256,uint256,uint8,bytes32,bytes32)":{"params":{"_fee":"number of tokens to give to message sender\r","_nonce":"nonce of the transfer\r","_r":"parameter R of digital signature\r","_s":"parameter S of digital signature\r","_to":"address to transfer token to the owner of\r","_v":"parameter V of digital signature\r","_value":"number of tokens to transfer\r"}},"flags(address)":{"params":{"_address":"address to get flags for\r"},"return":"flags for given address\r"},"getFeeParameters()":{"return":"fee parameters\r"},"name()":{"return":"name of the token\r"},"nonce(address)":{"params":{"_owner":"address of the token holder to get nonce for\r"},"return":"current nonce for token holder with give address\r"},"setDelegate(address)":{"params":{"_delegate":"address of smart contract to delegate execution of\r delegatable methods to, or zero to not delegate delegatable methods\r execution.\r"}},"setFeeCollector(address)":{"params":{"_newFeeCollector":"address of the new fee collector\r"}},"setFeeParameters(uint256,uint256,uint256,uint256)":{"params":{"_fixedFee":"fixed fee in token units\r","_maxVariableFee":"maximum variable fee in token units\r","_minVariableFee":"minimum variable fee in token units\r","_variableFeeNumerator":"variable fee numerator\r"}},"setFlags(address,uint256)":{"params":{"_address":"address to set flags for\r","_flags":"flags to set\r"}},"setOwner(address)":{"params":{"_newOwner":"address of the new owner\r"}},"symbol()":{"return":"symbol of the token\r"},"totalSupply()":{"return":"total number of tokens in circulation\r"},"transfer(address,uint256)":{"params":{"_to":"address to transfer tokens to the owner of\r","_value":"number of tokens to transfer to the owner of given address\r"},"return":"true if tokens were transferred successfully, false otherwise\r"},"transferFrom(address,address,uint256)":{"params":{"_from":"address to transfer tokens from the owner of\r","_to":"address to transfer tokens to the owner of\r","_value":"number of tokens to transfer from given owner to given\r       recipient\r"},"return":"true if tokens were transferred successfully, false otherwise\r"}}},"userdoc":{"methods":{"allowance(address,address)":{"notice":"Tell how many tokens given spender is currently allowed to transfer from\r given owner.\r "},"approve(address,uint256)":{"notice":"Allow given spender to transfer given number of tokens from message sender.\r "},"balanceOf(address)":{"notice":"Get number of tokens currently belonging to given owner.\r "},"burnTokens(uint256)":{"notice":"Burn tokens.\r "},"calculateFee(uint256)":{"notice":"Calculate fee for transfer of given number of tokens.\r "},"createTokens(uint256)":{"notice":"Create tokens.\r "},"decimals()":{"notice":"Get number of decimals for the token.\r "},"delegatedTransfer(address,uint256,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"Transfer given number of token from the signed defined by digital signature\r to given recipient.\r "},"flags(address)":{"notice":"Get flags for given address.\r "},"freezeTransfers()":{"notice":"Freeze token transfers.\r"},"getFeeParameters()":{"notice":"Get fee parameters.\r "},"name()":{"notice":"Get name of the token.\r "},"nonce(address)":{"notice":"Get current nonce for token holder with given address, i.e. nonce this\r token holder should use for next delegated transfer.\r "},"setDelegate(address)":{"notice":"Set address of smart contract to delegate execution of delegatable methods\r to.\r "},"setFeeCollector(address)":{"notice":"Set fee collector.\r "},"setFeeParameters(uint256,uint256,uint256,uint256)":{"notice":"Set fee parameters.\r "},"setFlags(address,uint256)":{"notice":"Set flags for given address.\r "},"setOwner(address)":{"notice":"Set smart contract owner.\r "},"symbol()":{"notice":"Get symbol of the token.\r "},"totalSupply()":{"notice":"Get total number of tokens in circulation.\r "},"transfer(address,uint256)":{"notice":"Transfer given number of tokens from message sender to given recipient.\r "},"transferFrom(address,address,uint256)":{"notice":"Transfer given number of tokens from given owner to given recipient.\r "},"unfreezeTransfers()":{"notice":"Unfreeze token transfers.\r"}}}},"settings":{"compilationTarget":{"./src/sol/SETToken.sol":"SETToken"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"./src/sol/AbstractToken.sol":{"keccak256":"0x7b44461098271a3d798f3cf295120bd42c475d466b010bf5c5902fa67c434748","urls":["bzzr://627354206ba315ebc51f7358510456d9c673a4514e57988206d506ef3a335704"]},"./src/sol/SETToken.sol":{"keccak256":"0xf0fad6c5e4479cfbb31f048236c91b544689f2a74a0c4388929ec7a105046da5","urls":["bzzr://356b72a89f259731824f71fdcf8d0204b6660a9fc5c8231d436075b155a51c71"]},"./src/sol/SafeMath.sol":{"keccak256":"0xc0a0d4ffcac794dbc1b3a489d93fe019f4efec1e6008e46746ea67669d810fa6","urls":["bzzr://2c040d56a3194264731c8e92dfadb10c3f7fb6a19cb0a845dc244085c7172ae6"]},"./src/sol/Token.sol":{"keccak256":"0xbeb1b0c85fb1cc1fda653b39bede428be882ffcf2798214081dbfe0bab364ccd","urls":["bzzr://ad3c1d53007755dc87ab65ed681fb96326f9f5dd7a8a9bda5d674f52a85a8f14"]}},"version":1}